/*
 * RESTful Manager API
 * This page provides an **interactive** documentation for RESTful Manager API. In addition to the typical information provided for each operation (parameters, responses, etc.), you can experiment with it by setting parameters and clicking the `Try it out!` button. The operation will be invoked, and you'll see the response code and body, as well as the `curl` command and request URL which were used to invoke the command.  Furthermore, since this API was created using [Swagger](http://swagger.io), you can also download its [specification](xap-manager-api.yaml) and use Swagger's [Online Editor](http://editor.swagger.io) to generate a client in your favorite language. 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SpaceInstanceOperationsStatistics
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-11-15T10:53:27.384Z")
public class SpaceInstanceOperationsStatistics {
  @SerializedName("adminTimestamp")
  private Long adminTimestamp = null;

  @SerializedName("timestamp")
  private Long timestamp = null;

  @SerializedName("writeCount")
  private Long writeCount = null;

  @SerializedName("writePerSecond")
  private Double writePerSecond = null;

  @SerializedName("readCount")
  private Long readCount = null;

  @SerializedName("readPerSecond")
  private Double readPerSecond = null;

  @SerializedName("takeCount")
  private Long takeCount = null;

  @SerializedName("takePerSecond")
  private Double takePerSecond = null;

  @SerializedName("updateCount")
  private Long updateCount = null;

  @SerializedName("updatePerSecond")
  private Double updatePerSecond = null;

  @SerializedName("changeCount")
  private Long changeCount = null;

  @SerializedName("changePerSecond")
  private Double changePerSecond = null;

  @SerializedName("notifyRegistrationCount")
  private Long notifyRegistrationCount = null;

  @SerializedName("notifyRegistrationPerSecond")
  private Double notifyRegistrationPerSecond = null;

  @SerializedName("notifyTriggerCount")
  private Long notifyTriggerCount = null;

  @SerializedName("notifyTriggerPerSecond")
  private Double notifyTriggerPerSecond = null;

  @SerializedName("notifyAckCount")
  private Long notifyAckCount = null;

  @SerializedName("notifyAckPerSecond")
  private Double notifyAckPerSecond = null;

  @SerializedName("executeCount")
  private Long executeCount = null;

  @SerializedName("executesPerSecond")
  private Double executesPerSecond = null;

  @SerializedName("objectCount")
  private Long objectCount = null;

  @SerializedName("notifyTemplateCount")
  private Long notifyTemplateCount = null;

  @SerializedName("activeConnectionCount")
  private Long activeConnectionCount = null;

  @SerializedName("activeTransactionCount")
  private Long activeTransactionCount = null;

  public SpaceInstanceOperationsStatistics adminTimestamp(Long adminTimestamp) {
    this.adminTimestamp = adminTimestamp;
    return this;
  }

   /**
   * Returns a timestamp that is in sync with where the admin API is running. Can return -1 if the clocks have are not sync yet
   * @return adminTimestamp
  **/
  @ApiModelProperty(required = true, value = "Returns a timestamp that is in sync with where the admin API is running. Can return -1 if the clocks have are not sync yet")
  public Long getAdminTimestamp() {
    return adminTimestamp;
  }

  public void setAdminTimestamp(Long adminTimestamp) {
    this.adminTimestamp = adminTimestamp;
  }

  public SpaceInstanceOperationsStatistics timestamp(Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * timestamp this space statistics were taken.
   * @return timestamp
  **/
  @ApiModelProperty(required = true, value = "timestamp this space statistics were taken.")
  public Long getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }

  public SpaceInstanceOperationsStatistics writeCount(Long writeCount) {
    this.writeCount = writeCount;
    return this;
  }

   /**
   * number of writes
   * @return writeCount
  **/
  @ApiModelProperty(required = true, value = "number of writes")
  public Long getWriteCount() {
    return writeCount;
  }

  public void setWriteCount(Long writeCount) {
    this.writeCount = writeCount;
  }

  public SpaceInstanceOperationsStatistics writePerSecond(Double writePerSecond) {
    this.writePerSecond = writePerSecond;
    return this;
  }

   /**
   * number of writes per second
   * @return writePerSecond
  **/
  @ApiModelProperty(required = true, value = "number of writes per second")
  public Double getWritePerSecond() {
    return writePerSecond;
  }

  public void setWritePerSecond(Double writePerSecond) {
    this.writePerSecond = writePerSecond;
  }

  public SpaceInstanceOperationsStatistics readCount(Long readCount) {
    this.readCount = readCount;
    return this;
  }

   /**
   * number of reads
   * @return readCount
  **/
  @ApiModelProperty(required = true, value = "number of reads")
  public Long getReadCount() {
    return readCount;
  }

  public void setReadCount(Long readCount) {
    this.readCount = readCount;
  }

  public SpaceInstanceOperationsStatistics readPerSecond(Double readPerSecond) {
    this.readPerSecond = readPerSecond;
    return this;
  }

   /**
   * number of reads per second
   * @return readPerSecond
  **/
  @ApiModelProperty(required = true, value = "number of reads per second")
  public Double getReadPerSecond() {
    return readPerSecond;
  }

  public void setReadPerSecond(Double readPerSecond) {
    this.readPerSecond = readPerSecond;
  }

  public SpaceInstanceOperationsStatistics takeCount(Long takeCount) {
    this.takeCount = takeCount;
    return this;
  }

   /**
   * number of takes
   * @return takeCount
  **/
  @ApiModelProperty(required = true, value = "number of takes")
  public Long getTakeCount() {
    return takeCount;
  }

  public void setTakeCount(Long takeCount) {
    this.takeCount = takeCount;
  }

  public SpaceInstanceOperationsStatistics takePerSecond(Double takePerSecond) {
    this.takePerSecond = takePerSecond;
    return this;
  }

   /**
   * number of takes per second
   * @return takePerSecond
  **/
  @ApiModelProperty(required = true, value = "number of takes per second")
  public Double getTakePerSecond() {
    return takePerSecond;
  }

  public void setTakePerSecond(Double takePerSecond) {
    this.takePerSecond = takePerSecond;
  }

  public SpaceInstanceOperationsStatistics updateCount(Long updateCount) {
    this.updateCount = updateCount;
    return this;
  }

   /**
   * number of updates
   * @return updateCount
  **/
  @ApiModelProperty(required = true, value = "number of updates")
  public Long getUpdateCount() {
    return updateCount;
  }

  public void setUpdateCount(Long updateCount) {
    this.updateCount = updateCount;
  }

  public SpaceInstanceOperationsStatistics updatePerSecond(Double updatePerSecond) {
    this.updatePerSecond = updatePerSecond;
    return this;
  }

   /**
   * number of updates per second
   * @return updatePerSecond
  **/
  @ApiModelProperty(required = true, value = "number of updates per second")
  public Double getUpdatePerSecond() {
    return updatePerSecond;
  }

  public void setUpdatePerSecond(Double updatePerSecond) {
    this.updatePerSecond = updatePerSecond;
  }

  public SpaceInstanceOperationsStatistics changeCount(Long changeCount) {
    this.changeCount = changeCount;
    return this;
  }

   /**
   * number of changes
   * @return changeCount
  **/
  @ApiModelProperty(required = true, value = "number of changes")
  public Long getChangeCount() {
    return changeCount;
  }

  public void setChangeCount(Long changeCount) {
    this.changeCount = changeCount;
  }

  public SpaceInstanceOperationsStatistics changePerSecond(Double changePerSecond) {
    this.changePerSecond = changePerSecond;
    return this;
  }

   /**
   * number of changes per second
   * @return changePerSecond
  **/
  @ApiModelProperty(required = true, value = "number of changes per second")
  public Double getChangePerSecond() {
    return changePerSecond;
  }

  public void setChangePerSecond(Double changePerSecond) {
    this.changePerSecond = changePerSecond;
  }

  public SpaceInstanceOperationsStatistics notifyRegistrationCount(Long notifyRegistrationCount) {
    this.notifyRegistrationCount = notifyRegistrationCount;
    return this;
  }

   /**
   * number of notify registration
   * @return notifyRegistrationCount
  **/
  @ApiModelProperty(required = true, value = "number of notify registration")
  public Long getNotifyRegistrationCount() {
    return notifyRegistrationCount;
  }

  public void setNotifyRegistrationCount(Long notifyRegistrationCount) {
    this.notifyRegistrationCount = notifyRegistrationCount;
  }

  public SpaceInstanceOperationsStatistics notifyRegistrationPerSecond(Double notifyRegistrationPerSecond) {
    this.notifyRegistrationPerSecond = notifyRegistrationPerSecond;
    return this;
  }

   /**
   * number of notify registration per second
   * @return notifyRegistrationPerSecond
  **/
  @ApiModelProperty(required = true, value = "number of notify registration per second")
  public Double getNotifyRegistrationPerSecond() {
    return notifyRegistrationPerSecond;
  }

  public void setNotifyRegistrationPerSecond(Double notifyRegistrationPerSecond) {
    this.notifyRegistrationPerSecond = notifyRegistrationPerSecond;
  }

  public SpaceInstanceOperationsStatistics notifyTriggerCount(Long notifyTriggerCount) {
    this.notifyTriggerCount = notifyTriggerCount;
    return this;
  }

   /**
   * number of notify trigger
   * @return notifyTriggerCount
  **/
  @ApiModelProperty(required = true, value = "number of notify trigger")
  public Long getNotifyTriggerCount() {
    return notifyTriggerCount;
  }

  public void setNotifyTriggerCount(Long notifyTriggerCount) {
    this.notifyTriggerCount = notifyTriggerCount;
  }

  public SpaceInstanceOperationsStatistics notifyTriggerPerSecond(Double notifyTriggerPerSecond) {
    this.notifyTriggerPerSecond = notifyTriggerPerSecond;
    return this;
  }

   /**
   * number of notify trigger per second
   * @return notifyTriggerPerSecond
  **/
  @ApiModelProperty(required = true, value = "number of notify trigger per second")
  public Double getNotifyTriggerPerSecond() {
    return notifyTriggerPerSecond;
  }

  public void setNotifyTriggerPerSecond(Double notifyTriggerPerSecond) {
    this.notifyTriggerPerSecond = notifyTriggerPerSecond;
  }

  public SpaceInstanceOperationsStatistics notifyAckCount(Long notifyAckCount) {
    this.notifyAckCount = notifyAckCount;
    return this;
  }

   /**
   * number of notify Ack
   * @return notifyAckCount
  **/
  @ApiModelProperty(required = true, value = "number of notify Ack")
  public Long getNotifyAckCount() {
    return notifyAckCount;
  }

  public void setNotifyAckCount(Long notifyAckCount) {
    this.notifyAckCount = notifyAckCount;
  }

  public SpaceInstanceOperationsStatistics notifyAckPerSecond(Double notifyAckPerSecond) {
    this.notifyAckPerSecond = notifyAckPerSecond;
    return this;
  }

   /**
   * number of notify ack per second
   * @return notifyAckPerSecond
  **/
  @ApiModelProperty(required = true, value = "number of notify ack per second")
  public Double getNotifyAckPerSecond() {
    return notifyAckPerSecond;
  }

  public void setNotifyAckPerSecond(Double notifyAckPerSecond) {
    this.notifyAckPerSecond = notifyAckPerSecond;
  }

  public SpaceInstanceOperationsStatistics executeCount(Long executeCount) {
    this.executeCount = executeCount;
    return this;
  }

   /**
   * number of executes
   * @return executeCount
  **/
  @ApiModelProperty(required = true, value = "number of executes")
  public Long getExecuteCount() {
    return executeCount;
  }

  public void setExecuteCount(Long executeCount) {
    this.executeCount = executeCount;
  }

  public SpaceInstanceOperationsStatistics executesPerSecond(Double executesPerSecond) {
    this.executesPerSecond = executesPerSecond;
    return this;
  }

   /**
   * number of executes per second
   * @return executesPerSecond
  **/
  @ApiModelProperty(required = true, value = "number of executes per second")
  public Double getExecutesPerSecond() {
    return executesPerSecond;
  }

  public void setExecutesPerSecond(Double executesPerSecond) {
    this.executesPerSecond = executesPerSecond;
  }

  public SpaceInstanceOperationsStatistics objectCount(Long objectCount) {
    this.objectCount = objectCount;
    return this;
  }

   /**
   * count of all the objects in this Space instance
   * @return objectCount
  **/
  @ApiModelProperty(required = true, value = "count of all the objects in this Space instance")
  public Long getObjectCount() {
    return objectCount;
  }

  public void setObjectCount(Long objectCount) {
    this.objectCount = objectCount;
  }

  public SpaceInstanceOperationsStatistics notifyTemplateCount(Long notifyTemplateCount) {
    this.notifyTemplateCount = notifyTemplateCount;
    return this;
  }

   /**
   * count of all the notify templates this Space instance
   * @return notifyTemplateCount
  **/
  @ApiModelProperty(required = true, value = "count of all the notify templates this Space instance")
  public Long getNotifyTemplateCount() {
    return notifyTemplateCount;
  }

  public void setNotifyTemplateCount(Long notifyTemplateCount) {
    this.notifyTemplateCount = notifyTemplateCount;
  }

  public SpaceInstanceOperationsStatistics activeConnectionCount(Long activeConnectionCount) {
    this.activeConnectionCount = activeConnectionCount;
    return this;
  }

   /**
   * count of all the active connections to this Space instance
   * @return activeConnectionCount
  **/
  @ApiModelProperty(required = true, value = "count of all the active connections to this Space instance")
  public Long getActiveConnectionCount() {
    return activeConnectionCount;
  }

  public void setActiveConnectionCount(Long activeConnectionCount) {
    this.activeConnectionCount = activeConnectionCount;
  }

  public SpaceInstanceOperationsStatistics activeTransactionCount(Long activeTransactionCount) {
    this.activeTransactionCount = activeTransactionCount;
    return this;
  }

   /**
   * count of all the active transactions (of all types) in this Space instance.
   * @return activeTransactionCount
  **/
  @ApiModelProperty(required = true, value = "count of all the active transactions (of all types) in this Space instance.")
  public Long getActiveTransactionCount() {
    return activeTransactionCount;
  }

  public void setActiveTransactionCount(Long activeTransactionCount) {
    this.activeTransactionCount = activeTransactionCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpaceInstanceOperationsStatistics spaceInstanceOperationsStatistics = (SpaceInstanceOperationsStatistics) o;
    return Objects.equals(this.adminTimestamp, spaceInstanceOperationsStatistics.adminTimestamp) &&
        Objects.equals(this.timestamp, spaceInstanceOperationsStatistics.timestamp) &&
        Objects.equals(this.writeCount, spaceInstanceOperationsStatistics.writeCount) &&
        Objects.equals(this.writePerSecond, spaceInstanceOperationsStatistics.writePerSecond) &&
        Objects.equals(this.readCount, spaceInstanceOperationsStatistics.readCount) &&
        Objects.equals(this.readPerSecond, spaceInstanceOperationsStatistics.readPerSecond) &&
        Objects.equals(this.takeCount, spaceInstanceOperationsStatistics.takeCount) &&
        Objects.equals(this.takePerSecond, spaceInstanceOperationsStatistics.takePerSecond) &&
        Objects.equals(this.updateCount, spaceInstanceOperationsStatistics.updateCount) &&
        Objects.equals(this.updatePerSecond, spaceInstanceOperationsStatistics.updatePerSecond) &&
        Objects.equals(this.changeCount, spaceInstanceOperationsStatistics.changeCount) &&
        Objects.equals(this.changePerSecond, spaceInstanceOperationsStatistics.changePerSecond) &&
        Objects.equals(this.notifyRegistrationCount, spaceInstanceOperationsStatistics.notifyRegistrationCount) &&
        Objects.equals(this.notifyRegistrationPerSecond, spaceInstanceOperationsStatistics.notifyRegistrationPerSecond) &&
        Objects.equals(this.notifyTriggerCount, spaceInstanceOperationsStatistics.notifyTriggerCount) &&
        Objects.equals(this.notifyTriggerPerSecond, spaceInstanceOperationsStatistics.notifyTriggerPerSecond) &&
        Objects.equals(this.notifyAckCount, spaceInstanceOperationsStatistics.notifyAckCount) &&
        Objects.equals(this.notifyAckPerSecond, spaceInstanceOperationsStatistics.notifyAckPerSecond) &&
        Objects.equals(this.executeCount, spaceInstanceOperationsStatistics.executeCount) &&
        Objects.equals(this.executesPerSecond, spaceInstanceOperationsStatistics.executesPerSecond) &&
        Objects.equals(this.objectCount, spaceInstanceOperationsStatistics.objectCount) &&
        Objects.equals(this.notifyTemplateCount, spaceInstanceOperationsStatistics.notifyTemplateCount) &&
        Objects.equals(this.activeConnectionCount, spaceInstanceOperationsStatistics.activeConnectionCount) &&
        Objects.equals(this.activeTransactionCount, spaceInstanceOperationsStatistics.activeTransactionCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminTimestamp, timestamp, writeCount, writePerSecond, readCount, readPerSecond, takeCount, takePerSecond, updateCount, updatePerSecond, changeCount, changePerSecond, notifyRegistrationCount, notifyRegistrationPerSecond, notifyTriggerCount, notifyTriggerPerSecond, notifyAckCount, notifyAckPerSecond, executeCount, executesPerSecond, objectCount, notifyTemplateCount, activeConnectionCount, activeTransactionCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpaceInstanceOperationsStatistics {\n");
    
    sb.append("    adminTimestamp: ").append(toIndentedString(adminTimestamp)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    writeCount: ").append(toIndentedString(writeCount)).append("\n");
    sb.append("    writePerSecond: ").append(toIndentedString(writePerSecond)).append("\n");
    sb.append("    readCount: ").append(toIndentedString(readCount)).append("\n");
    sb.append("    readPerSecond: ").append(toIndentedString(readPerSecond)).append("\n");
    sb.append("    takeCount: ").append(toIndentedString(takeCount)).append("\n");
    sb.append("    takePerSecond: ").append(toIndentedString(takePerSecond)).append("\n");
    sb.append("    updateCount: ").append(toIndentedString(updateCount)).append("\n");
    sb.append("    updatePerSecond: ").append(toIndentedString(updatePerSecond)).append("\n");
    sb.append("    changeCount: ").append(toIndentedString(changeCount)).append("\n");
    sb.append("    changePerSecond: ").append(toIndentedString(changePerSecond)).append("\n");
    sb.append("    notifyRegistrationCount: ").append(toIndentedString(notifyRegistrationCount)).append("\n");
    sb.append("    notifyRegistrationPerSecond: ").append(toIndentedString(notifyRegistrationPerSecond)).append("\n");
    sb.append("    notifyTriggerCount: ").append(toIndentedString(notifyTriggerCount)).append("\n");
    sb.append("    notifyTriggerPerSecond: ").append(toIndentedString(notifyTriggerPerSecond)).append("\n");
    sb.append("    notifyAckCount: ").append(toIndentedString(notifyAckCount)).append("\n");
    sb.append("    notifyAckPerSecond: ").append(toIndentedString(notifyAckPerSecond)).append("\n");
    sb.append("    executeCount: ").append(toIndentedString(executeCount)).append("\n");
    sb.append("    executesPerSecond: ").append(toIndentedString(executesPerSecond)).append("\n");
    sb.append("    objectCount: ").append(toIndentedString(objectCount)).append("\n");
    sb.append("    notifyTemplateCount: ").append(toIndentedString(notifyTemplateCount)).append("\n");
    sb.append("    activeConnectionCount: ").append(toIndentedString(activeConnectionCount)).append("\n");
    sb.append("    activeTransactionCount: ").append(toIndentedString(activeTransactionCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}


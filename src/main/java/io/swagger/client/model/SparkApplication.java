/*
 * RESTful Manager API
 * This page provides an **interactive** documentation for RESTful Manager API. In addition to the typical information provided for each operation (parameters, responses, etc.), you can experiment with it by setting parameters and clicking the `Try it out!` button. The operation will be invoked, and you'll see the response code and body, as well as the `curl` command and request URL which were used to invoke the command.  Furthermore, since this API was created using [Swagger](http://swagger.io), you can also download its [specification](xap-manager-api.yaml) and use Swagger's [Online Editor](http://editor.swagger.io) to generate a client in your favorite language. 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SparkApplication
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-11-15T10:53:27.384Z")
public class SparkApplication {
  @SerializedName("action")
  private String action = null;

  @SerializedName("driverState")
  private String driverState = null;

  @SerializedName("serverSparkVersion")
  private String serverSparkVersion = null;

  @SerializedName("submissionId")
  private String submissionId = null;

  @SerializedName("success")
  private Boolean success = null;

  @SerializedName("workerHostPort")
  private String workerHostPort = null;

  @SerializedName("workerId")
  private String workerId = null;

  public SparkApplication action(String action) {
    this.action = action;
    return this;
  }

   /**
   * Get action
   * @return action
  **/
  @ApiModelProperty(required = true, value = "")
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }

  public SparkApplication driverState(String driverState) {
    this.driverState = driverState;
    return this;
  }

   /**
   * Get driverState
   * @return driverState
  **/
  @ApiModelProperty(value = "")
  public String getDriverState() {
    return driverState;
  }

  public void setDriverState(String driverState) {
    this.driverState = driverState;
  }

  public SparkApplication serverSparkVersion(String serverSparkVersion) {
    this.serverSparkVersion = serverSparkVersion;
    return this;
  }

   /**
   * Get serverSparkVersion
   * @return serverSparkVersion
  **/
  @ApiModelProperty(required = true, value = "")
  public String getServerSparkVersion() {
    return serverSparkVersion;
  }

  public void setServerSparkVersion(String serverSparkVersion) {
    this.serverSparkVersion = serverSparkVersion;
  }

  public SparkApplication submissionId(String submissionId) {
    this.submissionId = submissionId;
    return this;
  }

   /**
   * Get submissionId
   * @return submissionId
  **/
  @ApiModelProperty(required = true, value = "")
  public String getSubmissionId() {
    return submissionId;
  }

  public void setSubmissionId(String submissionId) {
    this.submissionId = submissionId;
  }

  public SparkApplication success(Boolean success) {
    this.success = success;
    return this;
  }

   /**
   * Get success
   * @return success
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean getSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }

  public SparkApplication workerHostPort(String workerHostPort) {
    this.workerHostPort = workerHostPort;
    return this;
  }

   /**
   * Get workerHostPort
   * @return workerHostPort
  **/
  @ApiModelProperty(value = "")
  public String getWorkerHostPort() {
    return workerHostPort;
  }

  public void setWorkerHostPort(String workerHostPort) {
    this.workerHostPort = workerHostPort;
  }

  public SparkApplication workerId(String workerId) {
    this.workerId = workerId;
    return this;
  }

   /**
   * Get workerId
   * @return workerId
  **/
  @ApiModelProperty(value = "")
  public String getWorkerId() {
    return workerId;
  }

  public void setWorkerId(String workerId) {
    this.workerId = workerId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SparkApplication sparkApplication = (SparkApplication) o;
    return Objects.equals(this.action, sparkApplication.action) &&
        Objects.equals(this.driverState, sparkApplication.driverState) &&
        Objects.equals(this.serverSparkVersion, sparkApplication.serverSparkVersion) &&
        Objects.equals(this.submissionId, sparkApplication.submissionId) &&
        Objects.equals(this.success, sparkApplication.success) &&
        Objects.equals(this.workerHostPort, sparkApplication.workerHostPort) &&
        Objects.equals(this.workerId, sparkApplication.workerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, driverState, serverSparkVersion, submissionId, success, workerHostPort, workerId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SparkApplication {\n");
    
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    driverState: ").append(toIndentedString(driverState)).append("\n");
    sb.append("    serverSparkVersion: ").append(toIndentedString(serverSparkVersion)).append("\n");
    sb.append("    submissionId: ").append(toIndentedString(submissionId)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    workerHostPort: ").append(toIndentedString(workerHostPort)).append("\n");
    sb.append("    workerId: ").append(toIndentedString(workerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}


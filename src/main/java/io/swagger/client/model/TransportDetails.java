/*
 * RESTful Manager API
 * This page provides an **interactive** documentation for RESTful Manager API. In addition to the typical information provided for each operation (parameters, responses, etc.), you can experiment with it by setting parameters and clicking the `Try it out!` button. The operation will be invoked, and you'll see the response code and body, as well as the `curl` command and request URL which were used to invoke the command.  Furthermore, since this API was created using [Swagger](http://swagger.io), you can also download its [specification](xap-manager-api.yaml) and use Swagger's [Online Editor](http://editor.swagger.io) to generate a client in your favorite language. 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * TransportDetails
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-11-15T10:53:27.384Z")
public class TransportDetails {
  @SerializedName("hostAddress")
  private String hostAddress = null;

  @SerializedName("hostName")
  private String hostName = null;

  @SerializedName("bindHost")
  private String bindHost = null;

  @SerializedName("port")
  private Integer port = null;

  @SerializedName("minThreads")
  private Integer minThreads = null;

  @SerializedName("maxThreads")
  private Integer maxThreads = null;

  @SerializedName("isSslEnabled")
  private Boolean isSslEnabled = null;

  public TransportDetails hostAddress(String hostAddress) {
    this.hostAddress = hostAddress;
    return this;
  }

   /**
   * local host address of the transport
   * @return hostAddress
  **/
  @ApiModelProperty(required = true, value = "local host address of the transport")
  public String getHostAddress() {
    return hostAddress;
  }

  public void setHostAddress(String hostAddress) {
    this.hostAddress = hostAddress;
  }

  public TransportDetails hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

   /**
   * local host address of the transport
   * @return hostName
  **/
  @ApiModelProperty(required = true, value = "local host address of the transport")
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }

  public TransportDetails bindHost(String bindHost) {
    this.bindHost = bindHost;
    return this;
  }

   /**
   * host name or address the communication layer bounded on
   * @return bindHost
  **/
  @ApiModelProperty(required = true, value = "host name or address the communication layer bounded on")
  public String getBindHost() {
    return bindHost;
  }

  public void setBindHost(String bindHost) {
    this.bindHost = bindHost;
  }

  public TransportDetails port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * port the communication layer bounded on
   * @return port
  **/
  @ApiModelProperty(required = true, value = "port the communication layer bounded on")
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }

  public TransportDetails minThreads(Integer minThreads) {
    this.minThreads = minThreads;
    return this;
  }

   /**
   * minimum number of threads configured for the transport communication layer thread pool
   * @return minThreads
  **/
  @ApiModelProperty(required = true, value = "minimum number of threads configured for the transport communication layer thread pool")
  public Integer getMinThreads() {
    return minThreads;
  }

  public void setMinThreads(Integer minThreads) {
    this.minThreads = minThreads;
  }

  public TransportDetails maxThreads(Integer maxThreads) {
    this.maxThreads = maxThreads;
    return this;
  }

   /**
   * maximum number of threads configured for the transport communication layer thread pool
   * @return maxThreads
  **/
  @ApiModelProperty(required = true, value = "maximum number of threads configured for the transport communication layer thread pool")
  public Integer getMaxThreads() {
    return maxThreads;
  }

  public void setMaxThreads(Integer maxThreads) {
    this.maxThreads = maxThreads;
  }

  public TransportDetails isSslEnabled(Boolean isSslEnabled) {
    this.isSslEnabled = isSslEnabled;
    return this;
  }

   /**
   * if ssl is enabled for the transport
   * @return isSslEnabled
  **/
  @ApiModelProperty(required = true, value = "if ssl is enabled for the transport")
  public Boolean getIsSslEnabled() {
    return isSslEnabled;
  }

  public void setIsSslEnabled(Boolean isSslEnabled) {
    this.isSslEnabled = isSslEnabled;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransportDetails transportDetails = (TransportDetails) o;
    return Objects.equals(this.hostAddress, transportDetails.hostAddress) &&
        Objects.equals(this.hostName, transportDetails.hostName) &&
        Objects.equals(this.bindHost, transportDetails.bindHost) &&
        Objects.equals(this.port, transportDetails.port) &&
        Objects.equals(this.minThreads, transportDetails.minThreads) &&
        Objects.equals(this.maxThreads, transportDetails.maxThreads) &&
        Objects.equals(this.isSslEnabled, transportDetails.isSslEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostAddress, hostName, bindHost, port, minThreads, maxThreads, isSslEnabled);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransportDetails {\n");
    
    sb.append("    hostAddress: ").append(toIndentedString(hostAddress)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    bindHost: ").append(toIndentedString(bindHost)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    minThreads: ").append(toIndentedString(minThreads)).append("\n");
    sb.append("    maxThreads: ").append(toIndentedString(maxThreads)).append("\n");
    sb.append("    isSslEnabled: ").append(toIndentedString(isSslEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}


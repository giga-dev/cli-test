/*
 * RESTful Manager API
 * This page provides an **interactive** documentation for RESTful Manager API. In addition to the typical information provided for each operation (parameters, responses, etc.), you can experiment with it by setting parameters and clicking the `Try it out!` button. The operation will be invoked, and you'll see the response code and body, as well as the `curl` command and request URL which were used to invoke the command.  Furthermore, since this API was created using [Swagger](http://swagger.io), you can also download its [specification](xap-manager-api.yaml) and use Swagger's [Online Editor](http://editor.swagger.io) to generate a client in your favorite language. 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * JvmStatistics
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-11-15T10:53:27.384Z")
public class JvmStatistics {
  @SerializedName("timestamp")
  private Long timestamp = null;

  @SerializedName("uptime")
  private Long uptime = null;

  @SerializedName("memoryHeapCommittedInBytes")
  private Long memoryHeapCommittedInBytes = null;

  @SerializedName("memoryHeapUsedInBytes")
  private Long memoryHeapUsedInBytes = null;

  @SerializedName("memoryNonHeapCommittedInBytes")
  private Long memoryNonHeapCommittedInBytes = null;

  @SerializedName("memoryNonHeapUsedInBytes")
  private Long memoryNonHeapUsedInBytes = null;

  @SerializedName("threadCount")
  private Integer threadCount = null;

  @SerializedName("peakThreadCount")
  private Integer peakThreadCount = null;

  @SerializedName("gcCount")
  private Long gcCount = null;

  @SerializedName("gcTime")
  private Long gcTime = null;

  @SerializedName("cpuPerc")
  private Double cpuPerc = null;

  public JvmStatistics timestamp(Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * timestamp when the statistics were taken
   * @return timestamp
  **/
  @ApiModelProperty(required = true, value = "timestamp when the statistics were taken")
  public Long getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }

  public JvmStatistics uptime(Long uptime) {
    this.uptime = uptime;
    return this;
  }

   /**
   * uptime of this virtual machine (in milliseconds)
   * @return uptime
  **/
  @ApiModelProperty(required = true, value = "uptime of this virtual machine (in milliseconds)")
  public Long getUptime() {
    return uptime;
  }

  public void setUptime(Long uptime) {
    this.uptime = uptime;
  }

  public JvmStatistics memoryHeapCommittedInBytes(Long memoryHeapCommittedInBytes) {
    this.memoryHeapCommittedInBytes = memoryHeapCommittedInBytes;
    return this;
  }

   /**
   * amount of committed heap memory in bytes
   * @return memoryHeapCommittedInBytes
  **/
  @ApiModelProperty(required = true, value = "amount of committed heap memory in bytes")
  public Long getMemoryHeapCommittedInBytes() {
    return memoryHeapCommittedInBytes;
  }

  public void setMemoryHeapCommittedInBytes(Long memoryHeapCommittedInBytes) {
    this.memoryHeapCommittedInBytes = memoryHeapCommittedInBytes;
  }

  public JvmStatistics memoryHeapUsedInBytes(Long memoryHeapUsedInBytes) {
    this.memoryHeapUsedInBytes = memoryHeapUsedInBytes;
    return this;
  }

   /**
   * amount of used heap memory in bytes
   * @return memoryHeapUsedInBytes
  **/
  @ApiModelProperty(required = true, value = "amount of used heap memory in bytes")
  public Long getMemoryHeapUsedInBytes() {
    return memoryHeapUsedInBytes;
  }

  public void setMemoryHeapUsedInBytes(Long memoryHeapUsedInBytes) {
    this.memoryHeapUsedInBytes = memoryHeapUsedInBytes;
  }

  public JvmStatistics memoryNonHeapCommittedInBytes(Long memoryNonHeapCommittedInBytes) {
    this.memoryNonHeapCommittedInBytes = memoryNonHeapCommittedInBytes;
    return this;
  }

   /**
   * amount of committed non-heap memory in bytes
   * @return memoryNonHeapCommittedInBytes
  **/
  @ApiModelProperty(required = true, value = "amount of committed non-heap memory in bytes")
  public Long getMemoryNonHeapCommittedInBytes() {
    return memoryNonHeapCommittedInBytes;
  }

  public void setMemoryNonHeapCommittedInBytes(Long memoryNonHeapCommittedInBytes) {
    this.memoryNonHeapCommittedInBytes = memoryNonHeapCommittedInBytes;
  }

  public JvmStatistics memoryNonHeapUsedInBytes(Long memoryNonHeapUsedInBytes) {
    this.memoryNonHeapUsedInBytes = memoryNonHeapUsedInBytes;
    return this;
  }

   /**
   * amount of used non-heap memory in bytes
   * @return memoryNonHeapUsedInBytes
  **/
  @ApiModelProperty(required = true, value = "amount of used non-heap memory in bytes")
  public Long getMemoryNonHeapUsedInBytes() {
    return memoryNonHeapUsedInBytes;
  }

  public void setMemoryNonHeapUsedInBytes(Long memoryNonHeapUsedInBytes) {
    this.memoryNonHeapUsedInBytes = memoryNonHeapUsedInBytes;
  }

  public JvmStatistics threadCount(Integer threadCount) {
    this.threadCount = threadCount;
    return this;
  }

   /**
   * current number of live threads in this virtual machine (including both daemon and non-daemon threads)
   * @return threadCount
  **/
  @ApiModelProperty(required = true, value = "current number of live threads in this virtual machine (including both daemon and non-daemon threads)")
  public Integer getThreadCount() {
    return threadCount;
  }

  public void setThreadCount(Integer threadCount) {
    this.threadCount = threadCount;
  }

  public JvmStatistics peakThreadCount(Integer peakThreadCount) {
    this.peakThreadCount = peakThreadCount;
    return this;
  }

   /**
   * peak live thread count since this virtual machine started (or peak was reset)
   * @return peakThreadCount
  **/
  @ApiModelProperty(required = true, value = "peak live thread count since this virtual machine started (or peak was reset)")
  public Integer getPeakThreadCount() {
    return peakThreadCount;
  }

  public void setPeakThreadCount(Integer peakThreadCount) {
    this.peakThreadCount = peakThreadCount;
  }

  public JvmStatistics gcCount(Long gcCount) {
    this.gcCount = gcCount;
    return this;
  }

   /**
   * total number of garbage collections that have occurred in this virtual machine
   * @return gcCount
  **/
  @ApiModelProperty(required = true, value = "total number of garbage collections that have occurred in this virtual machine")
  public Long getGcCount() {
    return gcCount;
  }

  public void setGcCount(Long gcCount) {
    this.gcCount = gcCount;
  }

  public JvmStatistics gcTime(Long gcTime) {
    this.gcTime = gcTime;
    return this;
  }

   /**
   * approximate accumulated garbage collection elapsed time (in milliseconds) in this virtual machine
   * @return gcTime
  **/
  @ApiModelProperty(required = true, value = "approximate accumulated garbage collection elapsed time (in milliseconds) in this virtual machine")
  public Long getGcTime() {
    return gcTime;
  }

  public void setGcTime(Long gcTime) {
    this.gcTime = gcTime;
  }

  public JvmStatistics cpuPerc(Double cpuPerc) {
    this.cpuPerc = cpuPerc;
    return this;
  }

   /**
   * CPU percentage this virtual machine is using
   * @return cpuPerc
  **/
  @ApiModelProperty(required = true, value = "CPU percentage this virtual machine is using")
  public Double getCpuPerc() {
    return cpuPerc;
  }

  public void setCpuPerc(Double cpuPerc) {
    this.cpuPerc = cpuPerc;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JvmStatistics jvmStatistics = (JvmStatistics) o;
    return Objects.equals(this.timestamp, jvmStatistics.timestamp) &&
        Objects.equals(this.uptime, jvmStatistics.uptime) &&
        Objects.equals(this.memoryHeapCommittedInBytes, jvmStatistics.memoryHeapCommittedInBytes) &&
        Objects.equals(this.memoryHeapUsedInBytes, jvmStatistics.memoryHeapUsedInBytes) &&
        Objects.equals(this.memoryNonHeapCommittedInBytes, jvmStatistics.memoryNonHeapCommittedInBytes) &&
        Objects.equals(this.memoryNonHeapUsedInBytes, jvmStatistics.memoryNonHeapUsedInBytes) &&
        Objects.equals(this.threadCount, jvmStatistics.threadCount) &&
        Objects.equals(this.peakThreadCount, jvmStatistics.peakThreadCount) &&
        Objects.equals(this.gcCount, jvmStatistics.gcCount) &&
        Objects.equals(this.gcTime, jvmStatistics.gcTime) &&
        Objects.equals(this.cpuPerc, jvmStatistics.cpuPerc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, uptime, memoryHeapCommittedInBytes, memoryHeapUsedInBytes, memoryNonHeapCommittedInBytes, memoryNonHeapUsedInBytes, threadCount, peakThreadCount, gcCount, gcTime, cpuPerc);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JvmStatistics {\n");
    
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    uptime: ").append(toIndentedString(uptime)).append("\n");
    sb.append("    memoryHeapCommittedInBytes: ").append(toIndentedString(memoryHeapCommittedInBytes)).append("\n");
    sb.append("    memoryHeapUsedInBytes: ").append(toIndentedString(memoryHeapUsedInBytes)).append("\n");
    sb.append("    memoryNonHeapCommittedInBytes: ").append(toIndentedString(memoryNonHeapCommittedInBytes)).append("\n");
    sb.append("    memoryNonHeapUsedInBytes: ").append(toIndentedString(memoryNonHeapUsedInBytes)).append("\n");
    sb.append("    threadCount: ").append(toIndentedString(threadCount)).append("\n");
    sb.append("    peakThreadCount: ").append(toIndentedString(peakThreadCount)).append("\n");
    sb.append("    gcCount: ").append(toIndentedString(gcCount)).append("\n");
    sb.append("    gcTime: ").append(toIndentedString(gcTime)).append("\n");
    sb.append("    cpuPerc: ").append(toIndentedString(cpuPerc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}


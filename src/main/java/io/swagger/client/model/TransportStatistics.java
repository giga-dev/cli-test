/*
 * RESTful Manager API
 * This page provides an **interactive** documentation for RESTful Manager API. In addition to the typical information provided for each operation (parameters, responses, etc.), you can experiment with it by setting parameters and clicking the `Try it out!` button. The operation will be invoked, and you'll see the response code and body, as well as the `curl` command and request URL which were used to invoke the command.  Furthermore, since this API was created using [Swagger](http://swagger.io), you can also download its [specification](xap-manager-api.yaml) and use Swagger's [Online Editor](http://editor.swagger.io) to generate a client in your favorite language. 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * TransportStatistics
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-11-15T10:53:27.384Z")
public class TransportStatistics {
  @SerializedName("timestamp")
  private Long timestamp = null;

  @SerializedName("completedTaskCount")
  private Long completedTaskCount = null;

  @SerializedName("completedTaskPerSecond")
  private Double completedTaskPerSecond = null;

  @SerializedName("activeThreadsCount")
  private Integer activeThreadsCount = null;

  @SerializedName("activeThreadsPerc")
  private Double activeThreadsPerc = null;

  @SerializedName("queueSize")
  private Integer queueSize = null;

  public TransportStatistics timestamp(Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * timestamp when the statistics were taken
   * @return timestamp
  **/
  @ApiModelProperty(required = true, value = "timestamp when the statistics were taken")
  public Long getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }

  public TransportStatistics completedTaskCount(Long completedTaskCount) {
    this.completedTaskCount = completedTaskCount;
    return this;
  }

   /**
   * number of communication level tasks that were completed
   * @return completedTaskCount
  **/
  @ApiModelProperty(required = true, value = "number of communication level tasks that were completed")
  public Long getCompletedTaskCount() {
    return completedTaskCount;
  }

  public void setCompletedTaskCount(Long completedTaskCount) {
    this.completedTaskCount = completedTaskCount;
  }

  public TransportStatistics completedTaskPerSecond(Double completedTaskPerSecond) {
    this.completedTaskPerSecond = completedTaskPerSecond;
    return this;
  }

   /**
   * number of completed communication level tasks per second
   * @return completedTaskPerSecond
  **/
  @ApiModelProperty(required = true, value = "number of completed communication level tasks per second")
  public Double getCompletedTaskPerSecond() {
    return completedTaskPerSecond;
  }

  public void setCompletedTaskPerSecond(Double completedTaskPerSecond) {
    this.completedTaskPerSecond = completedTaskPerSecond;
  }

  public TransportStatistics activeThreadsCount(Integer activeThreadsCount) {
    this.activeThreadsCount = activeThreadsCount;
    return this;
  }

   /**
   * number of active threads currently processing a communication task
   * @return activeThreadsCount
  **/
  @ApiModelProperty(required = true, value = "number of active threads currently processing a communication task")
  public Integer getActiveThreadsCount() {
    return activeThreadsCount;
  }

  public void setActiveThreadsCount(Integer activeThreadsCount) {
    this.activeThreadsCount = activeThreadsCount;
  }

  public TransportStatistics activeThreadsPerc(Double activeThreadsPerc) {
    this.activeThreadsPerc = activeThreadsPerc;
    return this;
  }

   /**
   * percentage of active threads out of the maximum threads
   * @return activeThreadsPerc
  **/
  @ApiModelProperty(required = true, value = "percentage of active threads out of the maximum threads")
  public Double getActiveThreadsPerc() {
    return activeThreadsPerc;
  }

  public void setActiveThreadsPerc(Double activeThreadsPerc) {
    this.activeThreadsPerc = activeThreadsPerc;
  }

  public TransportStatistics queueSize(Integer queueSize) {
    this.queueSize = queueSize;
    return this;
  }

   /**
   * number of currently waiting communication tasks to be executed
   * @return queueSize
  **/
  @ApiModelProperty(required = true, value = "number of currently waiting communication tasks to be executed")
  public Integer getQueueSize() {
    return queueSize;
  }

  public void setQueueSize(Integer queueSize) {
    this.queueSize = queueSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransportStatistics transportStatistics = (TransportStatistics) o;
    return Objects.equals(this.timestamp, transportStatistics.timestamp) &&
        Objects.equals(this.completedTaskCount, transportStatistics.completedTaskCount) &&
        Objects.equals(this.completedTaskPerSecond, transportStatistics.completedTaskPerSecond) &&
        Objects.equals(this.activeThreadsCount, transportStatistics.activeThreadsCount) &&
        Objects.equals(this.activeThreadsPerc, transportStatistics.activeThreadsPerc) &&
        Objects.equals(this.queueSize, transportStatistics.queueSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, completedTaskCount, completedTaskPerSecond, activeThreadsCount, activeThreadsPerc, queueSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransportStatistics {\n");
    
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    completedTaskCount: ").append(toIndentedString(completedTaskCount)).append("\n");
    sb.append("    completedTaskPerSecond: ").append(toIndentedString(completedTaskPerSecond)).append("\n");
    sb.append("    activeThreadsCount: ").append(toIndentedString(activeThreadsCount)).append("\n");
    sb.append("    activeThreadsPerc: ").append(toIndentedString(activeThreadsPerc)).append("\n");
    sb.append("    queueSize: ").append(toIndentedString(queueSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}


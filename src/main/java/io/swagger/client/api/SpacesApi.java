/*
 * RESTful Manager API
 * This page provides an **interactive** documentation for RESTful Manager API. In addition to the typical information provided for each operation (parameters, responses, etc.), you can experiment with it by setting parameters and clicking the `Try it out!` button. The operation will be invoked, and you'll see the response code and body, as well as the `curl` command and request URL which were used to invoke the command.  Furthermore, since this API was created using [Swagger](http://swagger.io), you can also download its [specification](xap-manager-api.yaml) and use Swagger's [Online Editor](http://editor.swagger.io) to generate a client in your favorite language. 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Space;
import io.swagger.client.model.SpaceInstance;
import io.swagger.client.model.SpaceInstanceOperationsStatistics;
import io.swagger.client.model.SpaceInstanceReplicationStatistics;
import io.swagger.client.model.SpaceInstanceTypesStatistics;
import io.swagger.client.model.SpaceOperationsStatistics;
import io.swagger.client.model.SpaceTypesStatistics;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SpacesApi {
    private ApiClient apiClient;

    public SpacesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SpacesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for spacesGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spacesGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/spaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spacesGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = spacesGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Spaces
     * Get all spaces 
     * @return List&lt;Space&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Space> spacesGet() throws ApiException {
        ApiResponse<List<Space>> resp = spacesGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * List Spaces
     * Get all spaces 
     * @return ApiResponse&lt;List&lt;Space&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Space>> spacesGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = spacesGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<Space>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Spaces (asynchronously)
     * Get all spaces 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spacesGetAsync(final ApiCallback<List<Space>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spacesGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Space>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spacesIdGet
     * @param id Space name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spacesIdGetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/spaces/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spacesIdGetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling spacesIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = spacesIdGetCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Space
     * Get space by name 
     * @param id Space name (required)
     * @return Space
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Space spacesIdGet(String id) throws ApiException {
        ApiResponse<Space> resp = spacesIdGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Space
     * Get space by name 
     * @param id Space name (required)
     * @return ApiResponse&lt;Space&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Space> spacesIdGetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = spacesIdGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Space>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Space (asynchronously)
     * Get space by name 
     * @param id Space name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spacesIdGetAsync(String id, final ApiCallback<Space> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spacesIdGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Space>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spacesIdInstancesGet
     * @param id Space name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spacesIdInstancesGetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/spaces/{id}/instances"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spacesIdInstancesGetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling spacesIdInstancesGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = spacesIdInstancesGetCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Space instances
     * Get all space instances 
     * @param id Space name (required)
     * @return List&lt;SpaceInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SpaceInstance> spacesIdInstancesGet(String id) throws ApiException {
        ApiResponse<List<SpaceInstance>> resp = spacesIdInstancesGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * List Space instances
     * Get all space instances 
     * @param id Space name (required)
     * @return ApiResponse&lt;List&lt;SpaceInstance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SpaceInstance>> spacesIdInstancesGetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = spacesIdInstancesGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<List<SpaceInstance>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Space instances (asynchronously)
     * Get all space instances 
     * @param id Space name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spacesIdInstancesGetAsync(String id, final ApiCallback<List<SpaceInstance>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spacesIdInstancesGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SpaceInstance>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spacesIdInstancesInstanceIdGet
     * @param id Space name (required)
     * @param instanceId Space instance ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spacesIdInstancesInstanceIdGetCall(String id, String instanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/spaces/{id}/instances/{instanceId}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "instanceId" + "\\}", apiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spacesIdInstancesInstanceIdGetValidateBeforeCall(String id, String instanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling spacesIdInstancesInstanceIdGet(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling spacesIdInstancesInstanceIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = spacesIdInstancesInstanceIdGetCall(id, instanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Space instance
     * Get space instance by space name and instance id 
     * @param id Space name (required)
     * @param instanceId Space instance ID (required)
     * @return SpaceInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpaceInstance spacesIdInstancesInstanceIdGet(String id, String instanceId) throws ApiException {
        ApiResponse<SpaceInstance> resp = spacesIdInstancesInstanceIdGetWithHttpInfo(id, instanceId);
        return resp.getData();
    }

    /**
     * Get Space instance
     * Get space instance by space name and instance id 
     * @param id Space name (required)
     * @param instanceId Space instance ID (required)
     * @return ApiResponse&lt;SpaceInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpaceInstance> spacesIdInstancesInstanceIdGetWithHttpInfo(String id, String instanceId) throws ApiException {
        com.squareup.okhttp.Call call = spacesIdInstancesInstanceIdGetValidateBeforeCall(id, instanceId, null, null);
        Type localVarReturnType = new TypeToken<SpaceInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Space instance (asynchronously)
     * Get space instance by space name and instance id 
     * @param id Space name (required)
     * @param instanceId Space instance ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spacesIdInstancesInstanceIdGetAsync(String id, String instanceId, final ApiCallback<SpaceInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spacesIdInstancesInstanceIdGetValidateBeforeCall(id, instanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpaceInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spacesIdInstancesInstanceIdStatisticsOperationsGet
     * @param id Space name (required)
     * @param instanceId Space instance ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spacesIdInstancesInstanceIdStatisticsOperationsGetCall(String id, String instanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/spaces/{id}/instances/{instanceId}/statistics/operations"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "instanceId" + "\\}", apiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spacesIdInstancesInstanceIdStatisticsOperationsGetValidateBeforeCall(String id, String instanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling spacesIdInstancesInstanceIdStatisticsOperationsGet(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling spacesIdInstancesInstanceIdStatisticsOperationsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = spacesIdInstancesInstanceIdStatisticsOperationsGetCall(id, instanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Space instance operations statistics
     * Get space instance operations statistics 
     * @param id Space name (required)
     * @param instanceId Space instance ID (required)
     * @return SpaceInstanceOperationsStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpaceInstanceOperationsStatistics spacesIdInstancesInstanceIdStatisticsOperationsGet(String id, String instanceId) throws ApiException {
        ApiResponse<SpaceInstanceOperationsStatistics> resp = spacesIdInstancesInstanceIdStatisticsOperationsGetWithHttpInfo(id, instanceId);
        return resp.getData();
    }

    /**
     * Get Space instance operations statistics
     * Get space instance operations statistics 
     * @param id Space name (required)
     * @param instanceId Space instance ID (required)
     * @return ApiResponse&lt;SpaceInstanceOperationsStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpaceInstanceOperationsStatistics> spacesIdInstancesInstanceIdStatisticsOperationsGetWithHttpInfo(String id, String instanceId) throws ApiException {
        com.squareup.okhttp.Call call = spacesIdInstancesInstanceIdStatisticsOperationsGetValidateBeforeCall(id, instanceId, null, null);
        Type localVarReturnType = new TypeToken<SpaceInstanceOperationsStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Space instance operations statistics (asynchronously)
     * Get space instance operations statistics 
     * @param id Space name (required)
     * @param instanceId Space instance ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spacesIdInstancesInstanceIdStatisticsOperationsGetAsync(String id, String instanceId, final ApiCallback<SpaceInstanceOperationsStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spacesIdInstancesInstanceIdStatisticsOperationsGetValidateBeforeCall(id, instanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpaceInstanceOperationsStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spacesIdInstancesInstanceIdStatisticsReplicationGet
     * @param id Space name (required)
     * @param instanceId Space instance ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spacesIdInstancesInstanceIdStatisticsReplicationGetCall(String id, String instanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/spaces/{id}/instances/{instanceId}/statistics/replication"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "instanceId" + "\\}", apiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spacesIdInstancesInstanceIdStatisticsReplicationGetValidateBeforeCall(String id, String instanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling spacesIdInstancesInstanceIdStatisticsReplicationGet(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling spacesIdInstancesInstanceIdStatisticsReplicationGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = spacesIdInstancesInstanceIdStatisticsReplicationGetCall(id, instanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Space instance replication statistics
     * Get space instance replication statistics 
     * @param id Space name (required)
     * @param instanceId Space instance ID (required)
     * @return SpaceInstanceReplicationStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpaceInstanceReplicationStatistics spacesIdInstancesInstanceIdStatisticsReplicationGet(String id, String instanceId) throws ApiException {
        ApiResponse<SpaceInstanceReplicationStatistics> resp = spacesIdInstancesInstanceIdStatisticsReplicationGetWithHttpInfo(id, instanceId);
        return resp.getData();
    }

    /**
     * Get Space instance replication statistics
     * Get space instance replication statistics 
     * @param id Space name (required)
     * @param instanceId Space instance ID (required)
     * @return ApiResponse&lt;SpaceInstanceReplicationStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpaceInstanceReplicationStatistics> spacesIdInstancesInstanceIdStatisticsReplicationGetWithHttpInfo(String id, String instanceId) throws ApiException {
        com.squareup.okhttp.Call call = spacesIdInstancesInstanceIdStatisticsReplicationGetValidateBeforeCall(id, instanceId, null, null);
        Type localVarReturnType = new TypeToken<SpaceInstanceReplicationStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Space instance replication statistics (asynchronously)
     * Get space instance replication statistics 
     * @param id Space name (required)
     * @param instanceId Space instance ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spacesIdInstancesInstanceIdStatisticsReplicationGetAsync(String id, String instanceId, final ApiCallback<SpaceInstanceReplicationStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spacesIdInstancesInstanceIdStatisticsReplicationGetValidateBeforeCall(id, instanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpaceInstanceReplicationStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spacesIdInstancesInstanceIdStatisticsTypesGet
     * @param id Space name (required)
     * @param instanceId Space instance ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spacesIdInstancesInstanceIdStatisticsTypesGetCall(String id, String instanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/spaces/{id}/instances/{instanceId}/statistics/types"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "instanceId" + "\\}", apiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spacesIdInstancesInstanceIdStatisticsTypesGetValidateBeforeCall(String id, String instanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling spacesIdInstancesInstanceIdStatisticsTypesGet(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling spacesIdInstancesInstanceIdStatisticsTypesGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = spacesIdInstancesInstanceIdStatisticsTypesGetCall(id, instanceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Space instance types statistics
     * Get space instance types statistics 
     * @param id Space name (required)
     * @param instanceId Space instance ID (required)
     * @return SpaceInstanceTypesStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpaceInstanceTypesStatistics spacesIdInstancesInstanceIdStatisticsTypesGet(String id, String instanceId) throws ApiException {
        ApiResponse<SpaceInstanceTypesStatistics> resp = spacesIdInstancesInstanceIdStatisticsTypesGetWithHttpInfo(id, instanceId);
        return resp.getData();
    }

    /**
     * Get Space instance types statistics
     * Get space instance types statistics 
     * @param id Space name (required)
     * @param instanceId Space instance ID (required)
     * @return ApiResponse&lt;SpaceInstanceTypesStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpaceInstanceTypesStatistics> spacesIdInstancesInstanceIdStatisticsTypesGetWithHttpInfo(String id, String instanceId) throws ApiException {
        com.squareup.okhttp.Call call = spacesIdInstancesInstanceIdStatisticsTypesGetValidateBeforeCall(id, instanceId, null, null);
        Type localVarReturnType = new TypeToken<SpaceInstanceTypesStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Space instance types statistics (asynchronously)
     * Get space instance types statistics 
     * @param id Space name (required)
     * @param instanceId Space instance ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spacesIdInstancesInstanceIdStatisticsTypesGetAsync(String id, String instanceId, final ApiCallback<SpaceInstanceTypesStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spacesIdInstancesInstanceIdStatisticsTypesGetValidateBeforeCall(id, instanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpaceInstanceTypesStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spacesIdStatisticsOperationsGet
     * @param id Space name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spacesIdStatisticsOperationsGetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/spaces/{id}/statistics/operations"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spacesIdStatisticsOperationsGetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling spacesIdStatisticsOperationsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = spacesIdStatisticsOperationsGetCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Space operations statistics
     * Get space operations statistics by name 
     * @param id Space name (required)
     * @return SpaceOperationsStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpaceOperationsStatistics spacesIdStatisticsOperationsGet(String id) throws ApiException {
        ApiResponse<SpaceOperationsStatistics> resp = spacesIdStatisticsOperationsGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Space operations statistics
     * Get space operations statistics by name 
     * @param id Space name (required)
     * @return ApiResponse&lt;SpaceOperationsStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpaceOperationsStatistics> spacesIdStatisticsOperationsGetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = spacesIdStatisticsOperationsGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<SpaceOperationsStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Space operations statistics (asynchronously)
     * Get space operations statistics by name 
     * @param id Space name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spacesIdStatisticsOperationsGetAsync(String id, final ApiCallback<SpaceOperationsStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spacesIdStatisticsOperationsGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpaceOperationsStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spacesIdStatisticsTypesGet
     * @param id Space name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spacesIdStatisticsTypesGetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/spaces/{id}/statistics/types"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spacesIdStatisticsTypesGetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling spacesIdStatisticsTypesGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = spacesIdStatisticsTypesGetCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Space types statistics
     * Get space type statistics by name 
     * @param id Space name (required)
     * @return SpaceTypesStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpaceTypesStatistics spacesIdStatisticsTypesGet(String id) throws ApiException {
        ApiResponse<SpaceTypesStatistics> resp = spacesIdStatisticsTypesGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Space types statistics
     * Get space type statistics by name 
     * @param id Space name (required)
     * @return ApiResponse&lt;SpaceTypesStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpaceTypesStatistics> spacesIdStatisticsTypesGetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = spacesIdStatisticsTypesGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<SpaceTypesStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Space types statistics (asynchronously)
     * Get space type statistics by name 
     * @param id Space name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spacesIdStatisticsTypesGetAsync(String id, final ApiCallback<SpaceTypesStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spacesIdStatisticsTypesGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpaceTypesStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spacesPost
     * @param name Space name (required)
     * @param partitions Number of partitions (optional)
     * @param backups true if each partition should have a backup, false otherwise (optional)
     * @param requiresIsolation true if each instance should be provisioned in an isolated container, i.e. without any other instances at the same container, false otherwise. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spacesPostCall(String name, Integer partitions, Boolean backups, Boolean requiresIsolation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/spaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (partitions != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "partitions", partitions));
        if (backups != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "backups", backups));
        if (requiresIsolation != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "requiresIsolation", requiresIsolation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicSecurity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spacesPostValidateBeforeCall(String name, Integer partitions, Boolean backups, Boolean requiresIsolation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling spacesPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = spacesPostCall(name, partitions, backups, requiresIsolation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deploy a new Space
     * Submits a request to deploy a new space. The request is processed asynchronously. A client can track the request&#39;s progress via the returned request id. Note: This operation is intended for common space deployments - for advanced scenarios refer to &#x60;POST /deployments&#x60;.  **Security:** This operation requires &#x60;PROVISION_PU&#x60; privilege to execute. 
     * @param name Space name (required)
     * @param partitions Number of partitions (optional)
     * @param backups true if each partition should have a backup, false otherwise (optional)
     * @param requiresIsolation true if each instance should be provisioned in an isolated container, i.e. without any other instances at the same container, false otherwise. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String spacesPost(String name, Integer partitions, Boolean backups, Boolean requiresIsolation) throws ApiException {
        ApiResponse<String> resp = spacesPostWithHttpInfo(name, partitions, backups, requiresIsolation);
        return resp.getData();
    }

    /**
     * Deploy a new Space
     * Submits a request to deploy a new space. The request is processed asynchronously. A client can track the request&#39;s progress via the returned request id. Note: This operation is intended for common space deployments - for advanced scenarios refer to &#x60;POST /deployments&#x60;.  **Security:** This operation requires &#x60;PROVISION_PU&#x60; privilege to execute. 
     * @param name Space name (required)
     * @param partitions Number of partitions (optional)
     * @param backups true if each partition should have a backup, false otherwise (optional)
     * @param requiresIsolation true if each instance should be provisioned in an isolated container, i.e. without any other instances at the same container, false otherwise. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> spacesPostWithHttpInfo(String name, Integer partitions, Boolean backups, Boolean requiresIsolation) throws ApiException {
        com.squareup.okhttp.Call call = spacesPostValidateBeforeCall(name, partitions, backups, requiresIsolation, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deploy a new Space (asynchronously)
     * Submits a request to deploy a new space. The request is processed asynchronously. A client can track the request&#39;s progress via the returned request id. Note: This operation is intended for common space deployments - for advanced scenarios refer to &#x60;POST /deployments&#x60;.  **Security:** This operation requires &#x60;PROVISION_PU&#x60; privilege to execute. 
     * @param name Space name (required)
     * @param partitions Number of partitions (optional)
     * @param backups true if each partition should have a backup, false otherwise (optional)
     * @param requiresIsolation true if each instance should be provisioned in an isolated container, i.e. without any other instances at the same container, false otherwise. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spacesPostAsync(String name, Integer partitions, Boolean backups, Boolean requiresIsolation, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spacesPostValidateBeforeCall(name, partitions, backups, requiresIsolation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
